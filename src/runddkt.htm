<SCRIPT LANGUAGE="JavaScript">
<!--

////////////////////////////////////////////////////////////////////////////
// This Demonstration Driver Knowledge Test was developed by Lee Borkman
// for the Roads and Traffic Authority of New South Wales.
//
// No part of the code may be duplicated or modified without the consent
// of the Roads and Traffic Authority of New South Wales.
//
// Email: Lee_Borkman@rta.nsw.gov.au
//
// © Roads and Traffic Authority (NSW), 1999
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
	function runDDKT() {
	//  The main program
	
		initGlobalVars();
	
		initQuestionsAndLists();

		// Load the first chunk of immediately needed common images
		add("noselect.gif");
		add("exit.gif");
		add("outof.gif");
		add("tryagain.gif");
		
		// Load the images for the first (zero) question
		fetchQuestion(0);
		add("0.gif");
	
		// Load the rest of the common images
		add("outof.gif");
		add("okay.gif");
		add("selected.gif");
		add("correct.gif");
		add("wrong.gif");
		add("arrow.gif");
		add("question.gif");
		add("next.gif");
		add("skip.gif");
		add("cartest.gif");
		add("score.gif");
		add("qstnlbl.gif");
		add("heading.gif");
		add("spacer.gif");
		add("proceed.gif");

		//  Start with question zero
		currentList=0;
		skippedList = [];
		randomList = lists[0];
		currentQuestionInList=0;
		
		//  Allow extra time (extra 30 secs) due to loading common images
		displayQuestion(-60);

	}	

////////////////////////////////////////////////////////////////////////////
	function initGlobalVars() {
	
		// How many questions?
		LastQuestion = 21;
		
		// How many Lists of questions?
		LastList = 5;
		
		// How many subtests?
		LastSubTest = 11;
		
		// Array to hold all dynamic images
		graphics = new Array();
		
		// Array to hold question objects
		question = new Array();

		// Array to accumulate questions that have been skipped
		skippedList = new Array();

		// Array to hold the subtest question lists
		lists = new Array();

		// Array to hold a copy of the current list for processing
		randomList = new Array();

		// Three arrays used to randomise the order in which
		// multiple choice options are displayed
		optionList = new Array(0,1,2);
		randomOptionList = new Array();
		threeLetterList = new Array('a','b','c');
		
		// What is this question's position within the DDKT?
		questionOutOf20LoopIndex = 0;

	 	// The current question
		q = 0;

		// Total score and total number attempted
		// ... ignores the RepeatUntilCorrect questions
		totalAttempted = 0;
		score = 0;
		 
		// Subtest scores and subtest number attempted
		testScore = new Array();
		testOutOf = new Array();
		for (var i=0;i<=LastSubTest;i++) {
		 	testScore[i] = 0;
		 	testOutOf[i] = 0;
		}
		
		// State variables
		selectedNum = 4; // This NOT really a valid selection
		selectedYet = false;
		betweenQuestions = true;
		proceeding = false;
		skipable = false;
		okayable = false;
		exitable = false;
		doingSkipped = false;

	}



////////////////////////////////////////////////////////////////////////////
	function initQuestionsAndLists() {
		
		// define 21 questions and set default values for attributes
		for (var i=0;i<=LastQuestion;i++) {
			question[i] = {
				questionOutOf20: -1,
				skipped: false,
				subTestNum: 0,
				repeatable: false
			}
		}
		
		// First ICAC question
		question[0].subTestNum =  0;
		question[0].skipped =  true;
		question[0].repeatable = true
			
		// 6  x General Knowledge questions
		question[1].subTestNum = 1;
		question[2].subTestNum = 1;
		question[3].subTestNum = 1;
		question[4].subTestNum = 1;
		question[5].subTestNum = 1;
		question[6].subTestNum = 1;
			
		// 8 x Road Safety questions
		question[7].subTestNum = 2;
		question[8].subTestNum = 3;
		question[9].subTestNum = 4;
		question[10].subTestNum = 5;
		question[11].subTestNum = 6;
		question[12].subTestNum = 7;
		question[13].subTestNum = 8;
		question[14].subTestNum = 9;

		// 6 x Road Signs questions
		question[15].subTestNum = 10;
		question[16].subTestNum = 10;
		question[17].subTestNum = 10;
		question[18].subTestNum = 11;
		question[19].subTestNum = 11;
		question[20].subTestNum = 11;

		// Final ICAC question
		question[21].subTestNum =  0;
		question[21].skipped =  true;
		question[21].repeatable = true
			
		// Define arrays for individual sublists
		lists[0] = new Array();
		lists[1] = new Array();
		lists[2] = new Array();
		lists[3] = new Array();
		lists[4] = new Array();
		lists[5] = new Array();
	
		// Define the questions for each individual sublist
		lists[0] = [0];
		lists[1] = [1,2,3,4,5,6];
		lists[2] = [7,8,9,10,11,12,13,14];
		lists[3] = [15,16,17];
		lists[4] = [18,19,20];
		lists[5] = [21];
		
		// Randomise the order of the two Traffic Signs subtests
		if (Math.random() < 0.5) {
			var tmpList = lists[3];
			lists[3] = lists[4];
			lists[4] = tmpList;
		}
		
		//  Randomise the order of questions within each subtest
		for (i=0;i<lists.length;i++) {
			randomList = makeRandomList(lists[i]);
			
			// Make last question in each major subtest unskippable
			if ((randomList.length != 0) && (i != 3)) {
				question[randomList[randomList.length-1]].skipped = true;
			}
			lists[i] = randomList;
		}
		
		// Build a master list with ALL questions in display order
		// Use this list to preload the NEXT question's images
		masterList = new Array();
		masterList = masterList.concat(lists[0]);
		masterList = masterList.concat(lists[1]);
		masterList = masterList.concat(lists[2]);
		masterList = masterList.concat(lists[3]);
		masterList = masterList.concat(lists[4]);
		masterList = masterList.concat(lists[5]);
	}


////////////////////////////////////////////////////////////////////////////
	function add(img) {
	// Preload one image into the graphics associative array
		graphics[img] = new Image();
		graphics[img].src = img;
	}
	
	
////////////////////////////////////////////////////////////////////////////
	function fetchQuestion(x) {
	// Preload all of the images for one question
		add("ques" + x + ".gif");
		add("ans"  + x + "a.gif");
		add("ans"  + x + "ah.gif");
		add("ans"  + x + "b.gif");
		add("ans"  + x + "bh.gif");
		add("ans"  + x + "c.gif");
		add("ans"  + x + "ch.gif");
		add("test" + question[x].subTestNum + ".gif");
		return;
	}
	

////////////////////////////////////////////////////////////////////////////
	function makeRandomList(source) {
	// Takes a source list as parameter and returns a shuffled copy
	
		// How long is the source list
		var loops = source.length;

		// Make empty target array
		var target = new Array();
		target = [];

		for (var i=0; i<loops; i++) {
		// Repeat for the ORIGINAL length of the source array

			// Get a random integer (r) between zero and the CURRENT length of the source list
			var r = randInt(source.length);

			// Append the rth character form the source list onto the target list
			target[target.length] = source[r];

			// Delete the rth character from the source list
			var front = source.slice(0,r);
			var back = source.slice(r+1);
			source = front.concat(back);
		}
		
		return target;
	}
	
	
////////////////////////////////////////////////////////////////////////////
	function proceedScreen() {
	//  Display the Click to Proceed screen
		disableButtons();
		this.document.questionPic.src = graphics["proceed.gif"].src;
		this.document.answerPicA.src = graphics["spacer.gif"].src;
		this.document.answerPicB.src = graphics["spacer.gif"].src;
		this.document.answerPicC.src = graphics["spacer.gif"].src;
		this.document.selectPicA.src = graphics["spacer.gif"].src;
		this.document.selectPicB.src = graphics["spacer.gif"].src;
		this.document.selectPicC.src = graphics["spacer.gif"].src;
		this.document.okayPic.src = graphics["spacer.gif"].src;
		this.document.exitPic.src = graphics["spacer.gif"].src;
		this.document.skipPic.src = graphics["spacer.gif"].src;
	}



////////////////////////////////////////////////////////////////////////////
	function blankScreen() {
	//  Display blank screen
		betweenQuestions = true;
		disableButtons();
		this.document.questionPic.src = graphics["spacer.gif"].src;
		this.document.answerPicA.src = graphics["spacer.gif"].src;
		this.document.answerPicB.src = graphics["spacer.gif"].src;
		this.document.answerPicC.src = graphics["spacer.gif"].src;
		this.document.selectPicA.src = graphics["spacer.gif"].src;
		this.document.selectPicB.src = graphics["spacer.gif"].src;
		this.document.selectPicC.src = graphics["spacer.gif"].src;
		this.document.okayPic.src = graphics["spacer.gif"].src;
		this.document.exitPic.src = graphics["spacer.gif"].src;
		this.document.skipPic.src = graphics["spacer.gif"].src;
	}



////////////////////////////////////////////////////////////////////////////
	function displayQuestion(retries) {
	// Displays the images for the current question
	// Will not display until all the question's images are preloaded
	// Waits 500ms before trying again
	// Accepts retries parameter which holds number of times the function has had to wait
	// Opens error alert box after 120 unsuccessful attempts (1 minute),
	// ... then tries for another minute, etc.
	// When successful, displays question and preloads next question

		if (currentQuestionInList==randomList.length) {
			nextQuestion();
			return;
		}
		
		q = randomList[currentQuestionInList];

		if (question[q].questionOutOf20 == -1) {
		// This question has not yet been assigned a questionOutOf20 number
			question[q].questionOutOf20 = questionOutOf20LoopIndex;
			questionOutOf20LoopIndex++;
		}
		
		// Are all the question's images ready?
		var ready = true;
		ready = ready && graphics["ans"+q+"a.gif"].complete
		ready = ready && graphics["ans"+q+"b.gif"].complete
		ready = ready && graphics["ans"+q+"c.gif"].complete
		ready = ready && graphics["ans"+q+"ah.gif"].complete
		ready = ready && graphics["ans"+q+"bh.gif"].complete
		ready = ready && graphics["ans"+q+"ch.gif"].complete
		ready = ready && graphics["ques"+q+".gif"].complete
		ready = ready && graphics["test"+question[q].subTestNum+".gif"].complete
		ready = ready && graphics[question[q].questionOutOf20+".gif"].complete
		
		if (!ready) {
		//  Images not ready
			if (retries > 120) {
			//  Has retried for 1 minute
				alert("Error loading images.  Trying again...");
				fetchQuestion(q);
				window.setTimeout("displayQuestion(0)",500);
				return;
			}
			
			// Has not retried for 1 minute yet
			// Increment retries parameter and wait another 500ms
			var newtries = retries + 1;
			newtries = newtries.toString();
			window.setTimeout("displayQuestion(" + newtries + ")",500);
			return;
		}
		
		// Preload next question's images and the next digit for the score display
		if (masterList[questionOutOf20LoopIndex] <= LastQuestion) {
			fetchQuestion(masterList[questionOutOf20LoopIndex]);
			add(questionOutOf20LoopIndex + ".gif");
		}
			
		randomOptionList = makeRandomList(optionList);
		
		// No valid option selected yet
		selectedNum = 4;
		clearSelections();
		this.document.okayPic.src = graphics["spacer.gif"].src;
		this.document.exitPic.src = graphics["exit.gif"].src;
		
		
		// Display question and the 3 options in random order
		this.document.questionPic.src = graphics["ques" + q + ".gif"].src;
		this.document.answerPicA.src = graphics["ans" + q + threeLetterList[randomOptionList[0]] + ".gif"].src;
		this.document.answerPicB.src = graphics["ans" + q + threeLetterList[randomOptionList[1]] + ".gif"].src;
		this.document.answerPicC.src = graphics["ans" + q + threeLetterList[randomOptionList[2]] + ".gif"].src;


		// Display SKIP button if questions can be skipped
		if (question[q].skipped) {
			this.document.skipPic.src = graphics["spacer.gif"].src;
		} else {
			this.document.skipPic.src = graphics["skip.gif"].src;
		}

		// Display the Number of the current question (its position within the randomised test)
		this.document.questionNumberPic.src = graphics[question[q].questionOutOf20%21 + ".gif"].src;

		// Display the subtest heading for this question
		this.document.subTestPic.src = graphics["test" + question[q].subTestNum + ".gif"].src;
		

		//  Display score
		this.document.outOfPic.src = graphics["outof.gif"].src;
		this.document.totalAttemptedNumberPic.src = graphics[totalAttempted + ".gif"].src;
		this.document.scoreNumberPic.src = graphics[score + ".gif"].src;

		betweenQuestions = false;
		selectedYet = false;
		enableButtons();

		return;
	}
	
////////////////////////////////////////////////////////////////////////////
	function nextQuestion() {
	// Display the next question
	
		if (currentQuestionInList < randomList.length-1) {
		// We are not at the end of the current list
		
			currentQuestionInList++;
		} else {
		// We ARE at the end of the current list
		
			currentQuestionInList=0;
			if (doingSkipped) {
			// We have been doing the list of skipped questions
			
				// Reset state variable
				doingSkipped=false;
				// Move to next list
				currentList++;
				checkNoMoreLists();
				randomList = lists[currentList];
	
				if ((currentList != 1) && (currentList != 4) && (currentList != LastList)) {
				// We are not moving to or from an ICAC question, or between the traffic signs lists
				
					// Show the Click to Proceed screen
					proceeding = true;
					betweenQuestions = true;
					proceedScreen();
					return;
				} else {
					// Don't show the Click to Proceed screen.  Move straight on.
					proceeding = false;
					disableButtons();
					displayQuestion(0);
					return;
				}
			} else {
			// We have NOT been doing the list of skipped questions
				
				// Do the skipped list now
				doingSkipped=true;
				randomList=skippedList;
				skippedList=[];
			}
		}
		
		// Show the next question
		displayQuestion(0);
		return;
	}
	

////////////////////////////////////////////////////////////////////////////
	function displayResults() {
		// Open results page in new window
		var w = window.open("ddktrslt.htm", "ddktresult", "width=640,height=490");
	}


////////////////////////////////////////////////////////////////////////////
	function checkNoMoreLists() {
		if (currentList >= lists.length) {
			displayResults();
		}
	}
	

////////////////////////////////////////////////////////////////////////////
	function doExit() {
		if (betweenQuestions || !exitable) {return;}
		displayResults();
	}
	
////////////////////////////////////////////////////////////////////////////
	function doSelect(x) {
	// Select one of the three options
	
		if (x==selectedNum || x >= 3 || betweenQuestions) {
		// Is not a valid selection, or is already selected
			return;
		}
		
		// Clear any previous selections
		clearSelections();
		
		// Set state variables
		selectedYet = true;
		selectedNum = x;

		if (question[q].skipped) {
		//  The question CANNOT be skipped
			this.document.skipPic.src = graphics["spacer.gif"].src;
			this.document.okayPic.src = graphics["okay.gif"].src;
		} else {
		// The question CAN be skipped
			this.document.skipPic.src = graphics["skip.gif"].src;
		}
		
		//  Highlight selected option.  Uses images with "h.gif" suffix
		switch (x) {
			case 0:
				this.document.selectPicA.src = graphics["selected.gif"].src;
				this.document.answerPicA.src = graphics["ans" + q + threeLetterList[randomOptionList[0]] + "h.gif"].src;
				break;
			case 1:
				this.document.selectPicB.src = graphics["selected.gif"].src;
				this.document.answerPicB.src = graphics["ans" + q + threeLetterList[randomOptionList[1]] + "h.gif"].src;
				break;
			case 2:
				this.document.selectPicC.src = graphics["selected.gif"].src;
				this.document.answerPicC.src = graphics["ans" + q + threeLetterList[randomOptionList[2]] + "h.gif"].src;
				break;
			default:
				break;
		}
		
		// Show Okay button		
		this.document.okayPic.src = graphics["okay.gif"].src;
	}


////////////////////////////////////////////////////////////////////////////
	function clearSelections() {
	
		// Set state variables
		selectedYet = false;
		
		// Clears any existing highlighting for a previously select option
		switch (selectedNum) {
			case 0:
				this.document.selectPicA.src = graphics["noselect.gif"].src;
				this.document.answerPicA.src = graphics["ans" + q + threeLetterList[randomOptionList[0]] + ".gif"].src;
				break;
			case 1:
				this.document.selectPicB.src = graphics["noselect.gif"].src;
				this.document.answerPicB.src = graphics["ans" + q + threeLetterList[randomOptionList[1]] + ".gif"].src;
				break;
			case 2:
				this.document.selectPicC.src = graphics["noselect.gif"].src;
				this.document.answerPicC.src = graphics["ans" + q + threeLetterList[randomOptionList[2]] + ".gif"].src;
				break;
			default:
				this.document.selectPicA.src = graphics["noselect.gif"].src;
				this.document.answerPicA.src = graphics["ans" + q + threeLetterList[randomOptionList[0]] + ".gif"].src;
				this.document.selectPicB.src = graphics["noselect.gif"].src;
				this.document.answerPicB.src = graphics["ans" + q + threeLetterList[randomOptionList[1]] + ".gif"].src;
				this.document.selectPicC.src = graphics["noselect.gif"].src
				this.document.answerPicC.src = graphics["ans" + q + threeLetterList[randomOptionList[2]] + ".gif"].src;
				break;
		}			
	}


////////////////////////////////////////////////////////////////////////////
	function showInSelect(x, imageName) {
	// Shows an image (imageName) in the Select box of option x
	
		switch (x) {
			case 0:
				this.document.selectPicA.src = graphics[imageName].src;
				break;
			case 1:
				this.document.selectPicB.src = graphics[imageName].src;
				break;
			case 2:
				this.document.selectPicC.src = graphics[imageName].src;
				break;
			default:
				break;
		}
	}


////////////////////////////////////////////////////////////////////////////
	function showCorrect(x) {
		showInSelect(x, "correct.gif")
	}


////////////////////////////////////////////////////////////////////////////
	function showWrong(x) {
		showInSelect(x, "wrong.gif")
	}


////////////////////////////////////////////////////////////////////////////
	function showArrow(x) {
		showInSelect(x, "arrow.gif")
	}


////////////////////////////////////////////////////////////////////////////
	function doOkay() {
		if (proceeding || !okayable) {
		// Can't accept Okay
			return;
		}
		
		if (betweenQuestions) {
		// Has already chosen and confirmed incorrect answer
		// Clicked the NextQuestion button
			disableButtons();
			setTimeout("blankScreen()", 100);
			setTimeout("nextQuestion()", 1100);
			return;
		}
		
		if (!selectedYet) {
		// Hasn't selected any answer yet
			return;
		}
		
		betweenQuestions = true;
		
		if (!question[q].repeatable) {
		//  This question is not a RepeatUntilCorrect question
			
			// Increment the "out of' values for whole test and subtest
			totalAttempted++;
			testOutOf[question[q].subTestNum]++;
		}
		
		// Blank the Skip and Exit buttons
		this.document.exitPic.src = graphics["spacer.gif"].src;
		this.document.skipPic.src = graphics["spacer.gif"].src;

		thisNum = selectedNum;
		selectedNum = 4;

		if (randomOptionList[thisNum] == 0) {
		// Process correct answer
		
			if (!question[q].repeatable) {
			// Question is not RepeatUntilCorrect
			
				// Increment total score and subtest score
				score++;
				testScore[question[q].subTestNum]++;
			}
			
			// Display green tick for correct answer
			showCorrect(thisNum);
			
			// Blank the Okay button
			this.document.okayPic.src = graphics["spacer.gif"].src;

			// Blanks screen for 1 second then show next question
			disableButtons();
			setTimeout("blankScreen()", 1000);
			setTimeout("nextQuestion()", 2000);
			return;

		} else {
		// Incorrect answer
		
			// Show red cross for incorrect answer
			showWrong(thisNum);
			if (question[q].repeatable) {
			// Question is RepeatUntilCorrect
			
				// Show "Try Again" in skip place
				this.document.skipPic.src = graphics["tryagain.gif"].src;

				// Blank Okay button
				this.document.okayPic.src = graphics["spacer.gif"].src;

				selectedYet = false;
				betweenQuestions = false;
				exitable = false;
			} else {
			// Question is not RepeatUntilCorrect
			
				// Show blue arrow on correct answer
				for (var x=0; x<3 ; x++) {
					if (randomOptionList[x] == 0) {showArrow(x);}
				}
				
				// Show "Next Question" in Okay space
				this.document.okayPic.src = graphics["next.gif"].src;
			}
		}
	}



////////////////////////////////////////////////////////////////////////////
	function doProceed() {
	// Happens whenever we click in the Question image
	// Returns without doing anything unless the 'proceeding' var is true
		
		if (proceeding) {
		// This is a Click to Proceed page
		
			// Reset proceeding var to false
			proceeding = false;
			
			// Blank screen for 1 second, then show next question
			disableButtons();
			setTimeout("blankScreen()", 100);
			setTimeout("displayQuestion(0)", 1100);
			return;
		}
	}



////////////////////////////////////////////////////////////////////////////
	function doSkip() {
		if (!skipable || betweenQuestions || question[q].skipped) {
		// Can't skip
			return;
		}
		
		disableButtons();

		question[q].skipped = true;
		
		// Append question to skipped list
		skippedList[skippedList.length] = q;

		// Blank screen for 1 second, then show next question
		setTimeout("blankScreen()", 100);
		setTimeout("nextQuestion(0)", 1100);
		return;
	}



////////////////////////////////////////////////////////////////////////////
	function disableButtons() {
		skipable = false;
		okayable = false;
		exitable = false;
		return;
	}



////////////////////////////////////////////////////////////////////////////
	function enableButtons() {
		skipable = true;
		okayable = true;
		exitable = true;
		return;
	}


////////////////////////////////////////////////////////////////////////////
	function randInt(x) {
	// Returns a random integer from 0 to (x-1)
		return Math.round((Math.random() * x) - 0.5);
	}
		 

//-->
</SCRIPT>

<HTML>
<HEAD>
	<TITLE>Demonstration Driver Knowledge Test</TITLE>
</HEAD>

<BODY BGCOLOR="#CCCCCC" BACKGROUND="bgplain.jpg" LEFTMARGIN=4 TOPMARGIN=2 MARGINHEIGHT=2 MARGINWIDTH=4 OnLoad="runDDKT();">
<TABLE CELLSPACING="0" CELLPADDING="0" BORDER="0">
<TR>
    <TD ALIGN=left VALIGN=top><IMG SRC="logosmll.gif" BORDER=0 WIDTH=35 HEIGHT=34></TD>
    <TD ALIGN=left VALIGN=bottom><IMG SRC="cartest.gif" BORDER=0 WIDTH=200 HEIGHT=15><BR><IMG SRC="spacer.gif" BORDER=0 WIDTH=200 HEIGHT=15 NAME="subTestPic"></TD>
    <TD><IMG SRC="spacer.gif" WIDTH=140 HEIGHT=1></TD>
    <TD ALIGN=left VALIGN=bottom><IMG SRC="qstnlbl.gif" BORDER=0 WIDTH=200 HEIGHT=15><IMG SRC="spacer.gif" BORDER=0 WIDTH=15 HEIGHT=15><IMG SRC="spacer.gif" BORDER=0 WIDTH=15 HEIGHT=15 NAME="questionNumberPic"><BR><IMG SRC="score.gif" BORDER=0 WIDTH=200 HEIGHT=15 NAME="scoreLabelPic"><IMG SRC="spacer.gif" BORDER=0 WIDTH=15 HEIGHT=15 NAME="scoreNumberPic"><IMG SRC="spacer.gif" BORDER=0 WIDTH=15 HEIGHT=15 NAME="outOfPic"><IMG SRC="spacer.gif" BORDER=0 WIDTH=15 HEIGHT=15 NAME="totalAttemptedNumberPic"></TD>
</TR>
</TABLE>
<TABLE CELLSPACING="0" CELLPADDING="0" BORDER="0">
<TR>
    <TD ALIGN=left><A HREF="javascript: void 0" ONCLICK="doProceed();return false"" ONFOCUS="this.blur();"><IMG SRC="question.gif" NAME="questionPic" BORDER=0></A></TD>
</TR>
<TR>
    <TD ALIGN=left><A HREF="javascript: void 0" ONCLICK="doSelect(0);return false" ONFOCUS="this.blur();"><IMG SRC="spacer.gif" WIDTH=108 HEIGHT=65 NAME="selectPicA" BORDER=0 VSPACE=1><IMG SRC="spacer.gif" WIDTH=521 HEIGHT=65 NAME="answerPicA" BORDER=0 VSPACE=1></A></TD>
</TR>
<TR>
    <TD ALIGN=left><A HREF="javascript: void 0" ONCLICK="doSelect(1);return false" ONFOCUS="this.blur();"><IMG SRC="spacer.gif" WIDTH=108 HEIGHT=65 NAME="selectPicB" BORDER=0 VSPACE=1><IMG SRC="spacer.gif" WIDTH=521 HEIGHT=65 NAME="answerPicB" BORDER=0 VSPACE=1></A></TD>
</TR>
<TR>
    <TD ALIGN=left><A HREF="javascript: void 0" ONCLICK="doSelect(2);return false" ONFOCUS="this.blur();"><IMG SRC="spacer.gif" WIDTH=108 HEIGHT=65 NAME="selectPicC" BORDER=0 VSPACE=1><IMG SRC="spacer.gif" WIDTH=521 HEIGHT=65 NAME="answerPicC" BORDER=0 VSPACE=1></A></TD>
</TR>
<TR>
    <TD ALIGN=left><A HREF="javascript: void 0" ONCLICK="doExit();return false" ONFOCUS="this.blur();"><IMG SRC="spacer.gif" WIDTH=108 HEIGHT=65 NAME="exitPic" BORDER=0 VSPACE=1></A><A HREF="javascript: void 0" ONCLICK="doSkip();return false" ONFOCUS="this.blur();"><IMG SRC="spacer.gif" WIDTH=413 HEIGHT=65 NAME="skipPic" BORDER=0 VSPACE=1></A><A HREF="javascript: void 0" ONCLICK="doOkay();return false" ONFOCUS="this.blur();"><IMG SRC="spacer.gif" WIDTH=108 HEIGHT=65 NAME="okayPic" BORDER=0 VSPACE=1></A></TD>
</TR>
</TABLE>
</BODY>
</HTML>
